#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""This module offers different methods to show the current status of an
iterative calculation algorithm, for example in form of a progress bar or by
monitoring the values of certain simulation parameters.

Written by Daniel Jung, Jacobs University Bremen, Germany (2011-2012).
"""
# 2011-09-13 until 2012-04-10
import os as _os, sys as _sys, time as _time, commands as _commands
from tb.misc import dump as _dump



class Bar(object):
  """Display progress bar of a certain loop. Instantiate it before loop. Call
  the method "step" at the end of each loop (don't forget to do the same before
  any occurence of "continue"). If loop is left early (break), or if you want
  to make sure the line break is done after the loop, call the method "end". To
  reset the counter, call the method "reset".

  On initialization, the number of iterations "nstep" must be specified.
  Additional keyword arguments:
  text    : User-defined text message (instead of "Progress")
  width   : Width of the current shell window. Default: 80
  verbose : If set to False, the progress bar isn't shown
  etc     : If set to True, show estimated time to complete

  This class is only meant to be used in loops where the number of steps is
  known before entering the loops. This excludes all iterative algorithms that
  leave the loop only on some convergence criterions after a variable number of
  steps (e.g., while-loops). Of course, one could "estimate" the number of
  loops that will probably be used, but this is not the way this class is
  intended to be used.

  Future ideas:
  - Multiple progress bars at once, to show status of multiple subprocesses
  - allow nested progress bars, passing and multiplying step numbers to the
    next (inner) instance

  Written by Daniel Jung, Jacobs University Bremen, Germany (2011-2012).
  """
  # 2011-09-13 until 2012-03-05
  # former tb.Progress from 2011-02-13 until 2011-06-09

  def __init__(self, nstep=1, text='progress', width=None, verbose=True,
               etc=False): #optimistic=False

    now = _time.time()
    self._nstep     = nstep
    self._step      = 0
    self._jump      = 0
    self._oldline   = ''
    self._end       = False
    self._text      = text
    self._verbose   = verbose
    self._etc       = etc     # show estimated time of completion
    self._starttime = now     # starting time
    self._lastcall  = now     # time when step or jump was last called
    self._jumptime  = 0       # count time that was used only for jumping

    # do not show the error bar if number of steps is zero
    if self._nstep == 0:
      self._verbose = False

    # get width of the terminal window
    if width is not None:
      self._width = width
    else:
      self._width = get_columns()

    # print initial status to the screen
    if not self._verbose:
      return
    self.write()

  def step(self, howmany=1):
    """Move one or several steps forward."""
    if not self._verbose:
      return
    self._step += howmany
    if self._step > self._nstep:
      self._step = self._nstep

    # print new status
    self.write()
    #_dump(step=self._step)

    # note time of this call
    now = _time.time()
    self._lastcall = now

  def jump(self, howmany=1):
    """Skip one or several steps. Using this instead of step is only important
    for the correct calculation of the estimated time to complete (ETC)."""
    if not self._verbose:
      return
    self._step += howmany
    if self._step > self._nstep:
      self._step = self._nstep
    self._jump += howmany
    if self._jump > self._step:
      self._jump = self._step

    # add time difference since last call to the jump time counter
    now = _time.time()
    self._jumptime += now-self._lastcall

    # print new status
    self.write()

    # remember time of this call
    self._lastcall = now

  def write(self):
    from tb.misc import expandstr, nicetime
    import numpy as np

    if not self._verbose:
      return

    now = _time.time()

    if self._nstep == 1:
      # just say "done" when finished
      line = self._text+': '
      if self._step == 1:
        line += 'Done.'
    else:
      # calculate progress
      progress = float(self._step)/self._nstep

      # calculate estimated time to complete (ETC), use linear extrapolation
      etcstring = ''
      if self._etc:
        if self._nstep-self._jump != 0:
          jprogress = float(self._step-self._jump)/(self._nstep-self._jump)
          jelapsed = now-self._starttime-self._jumptime
          if jprogress > 0:
            jestimate = jelapsed/jprogress
            jdiff = jestimate-jelapsed
            etcstring = ' ETC %s' % nicetime(jdiff)

      # calculate length of the progress bar
      barlen = self._width-9-len(self._text)-len(etcstring)-1

      # create the new line
      line = '%s:% 4i%%' % (self._text, progress*100)
      if barlen > 0:
        line += ' [%- *s]' % (barlen, '='*int(progress*barlen))
      line += etcstring

    # if line has changed, overwrite the old one
    if line != self._oldline:
      _sys.stdout.write('\r'+line)
      _sys.stdout.flush()

    # remember old line
    self._oldline = line

    # check if progress bar is complete
    if self._step == self._nstep:
      self.end()

  def end(self):
    if not self._verbose:
      return
    if not self._end:
      _sys.stdout.write('\n')
      self._end = True

  def reset(self):
    self.end()
    now = _time.time()
    self._step      = 0
    self._jump      = 0
    self._oldline   = ''
    self._end       = False
    self._starttime = now
    self._lastcall  = now
    self._jumptime  = 0

  def __del__(self):
    self.end()

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, exc_traceback):
    self.end()











class OpenBar(object):
  """Display progress bar of an unlimited iteration process ("open-end"). Use
  this if the total number of iterations is unclear, i.e. the loop may be
  exited at any point (e.g., while loop). However, to display a progress bar,
  some measure of progress must still be defined (start and target values).
  If the start value is None, use the value given by the first call of step.

  Intended use: For example, an iterative averaging process will be aborted as
  soon as a certain accuracy has been reached. The progress measure will be
  this accuracy.

  Future plans:
  --> use something different than linear extrapolation"""
  # 2012-03-05

  def __init__(self, target, start=None,
               text='progress', width=None, verbose=True, etc=False):
                 pass










class Monitor(object):
  """Monitor the values of certain variables within a loop (e.g., for iterative
  algorithms). Uses the class StatusLine.

  Update the line by using carriage return each time the method "step" is
  called. Do this until the method "end" is called (then, a line break is
  issued).

  Future plans:
  --> support complex numbers"""
  # 2011-09-13 until 2012-04-10
  # former tb.Monitor from 2011-05-26 until 2011-06-09

  def __init__(self, **kwargs):
    import commands as cm

    # define standard formats for some types
    self._stdformats = {int: '%i', str: '%s', float: '%.2f',
                        long: '%lo'} #complex: '%.2f+%.2fi'

    # fetch special keyword arguments
    self._stdformats.update(**kwargs.pop('stdformats', {}))
    self._verbose = kwargs.pop('verbose', True)
    self._sep     = kwargs.pop('sep', '  ')
    cols          = kwargs.pop('cols', get_columns())
    self._formats = kwargs.pop('formats', {}) # formats dictionary
    self._order   = kwargs.pop('order', [])  # force a certain display order

    # store remaining keyword arguments
    self._values = kwargs

    # define additional attributes
    self._lengths = {}    # lengths dictionary
    
    # initialize status line object
    self._line = StatusLine(delay=.5, cols=cols)
    
    # first output is already displayed at initialisation
    if not self._verbose:
      return
    self.write()

  def update(self, **values):
    """Update one or more values, or add new variables to monitor."""
    if not self._verbose:
      return
    self._values.update(**values)
    self.write()

  def end(self):
    """Finish monitoring values, make the line break (if not already done)."""
    if not self._verbose:
      return
    self._line.end()

  #def reset(self):
    #"""Reset this object."""
    #if not self._verbose:
      #return
    #self.end()
    #self._values = {}
    #self._end = False
    #self.write()

  def write(self):
    """Write new line to stdout (overwrite existing line using carriage
    return)."""
    if not self._verbose:
      return

    # create list of keys. Begin with ordered keys, sort the rest by alphabet
    keys = self._order[:]
    for key in keys[:]:
      if key not in self._values:
        keys.remove(key)
    restkeys = self._values.keys()
    restkeys.sort()
    for key in restkeys:
      if key not in keys:
        keys.append(key)

    # collect all string representations in a dictionary
    strings = {}
    for key in keys:
      value = self._values[key]
      valuetype = type(value)
      if value is not None and key in self._formats:
        strings[key] = '%s=%s' % (key, self._formats[key].__mod__(value))
      elif value is not None and valuetype in self._stdformats:
        strings[key] = '%s=%s' % (key,
                                  self._stdformats[valuetype].__mod__(value))
      else:
        strings[key] = '%s=%s' % (key, repr(value))

    # update maximal lengths of the strings
    for key in keys:
      if key not in self._lengths or len(strings[key]) > self._lengths[key]:
        self._lengths[key] = len(strings[key])

    # create resulting line and write it to stdout
    line = self._sep.join('%- *s' % (self._lengths[key],
                                     strings[key]) for key in keys)
    #line = '%- *s' % (self.cols-1,
                      #self._sep.join('%- *s' % (self._lengths[key],
                                                #strings[key]) for key in keys))
    self._line.update(line)
    
  def __del__(self):
    self.end()

  def remove(self, *keys):
    """Stop monitoring the specified variables."""
    for key in keys:
      self._values.pop(key, None)
      self._lengths.pop(key, None)
      self._formats.pop(key, None)
    self.write()

  def __enter__(self):
    return self
  
  def __exit__(self):
    return self.end()
    
  def __del__(self):
    return self.end()


    
    
    
    
    
    
    
    
    
#class Monitor(object):
  #"""Monitor the values of certain variables within a loop (e.g., for iterative
  #algorithms).

  #Update the line by using carriage return each time the method "step" is
  #called. Do this until the method "end" is called (then, a line break is
  #issued).

  #Future plans:
  #--> support complex numbers"""
  ## 2011-09-13 until 2012-03-06
  ## former tb.Monitor from 2011-05-26 until 2011-06-09

  #def __init__(self, **kwargs):
    #import commands as cm

    ## define standard formats for some types
    #self._stdformats = {int: '%i', str: '%s', float: '%.2f',
                        #long: '%lo'} #complex: '%.2f+%.2fi'

    ## fetch special keyword arguments
    #self._stdformats.update(**kwargs.pop('stdformats', {}))
    #self._verbose = kwargs.pop('verbose', True)
    #self._sep     = kwargs.pop('sep', '  ')
    #self._width   = kwargs.pop('width', get_columns())
    #self._formats = kwargs.pop('formats', {}) # formats dictionary
    #self._order   = kwargs.pop('order', [])  # force a certain display order

    ## store remaining keyword arguments
    #self._values = kwargs

    ## define additional attributes
    #self._oldline = ''
    #self._end     = False
    #self._lengths = {}    # lengths dictionary

    ## first output is displayed already at initialisation
    #if not self._verbose:
      #return
    #self.write()

  #def update(self, **values):
    #"""Update one or more values, or add new variables to monitor."""
    #if not self._verbose:
      #return
    #self._values.update(**values)
    #self.write()

  #def end(self):
    #"""Finish monitoring values, make the line break (if not already done)."""
    #if not self._verbose:
      #return
    #if not self._end:
      #_sys.stdout.write('\n')
      #_sys.stdout.flush()
      #self._end = True

  #def reset(self):
    #"""Reset this object."""
    #if not self._verbose:
      #return
    #self.end()
    #self._values = {}
    #self._end = False
    #self.write()

  #def write(self):
    #"""Write new line to stdout (overwrite existing line using carriage
    #return)."""
    #if not self._verbose:
      #return

    ## create list of keys. Begin with ordered keys, sort the rest by alphabet
    #keys = self._order[:]
    #for key in keys[:]:
      #if key not in self._values:
        #keys.remove(key)
    #restkeys = self._values.keys()
    #restkeys.sort()
    #for key in restkeys:
      #if key not in keys:
        #keys.append(key)

    ## collect all string representations in a dictionary
    #strings = {}
    #for key in keys:
      #value = self._values[key]
      #valuetype = type(value)
      #if value is not None and key in self._formats:
        #strings[key] = '%s=%s' % (key, self._formats[key].__mod__(value))
      #elif value is not None and valuetype in self._stdformats:
        #strings[key] = '%s=%s' % (key,
                                  #self._stdformats[valuetype].__mod__(value))
      #else:
        #strings[key] = '%s=%s' % (key, repr(value))

    ## update maximal lengths of the strings
    #for key in keys:
      #if key not in self._lengths or len(strings[key]) > self._lengths[key]:
        #self._lengths[key] = len(strings[key])

    ## create resulting line and write it to stdout
    #line = '%- *s' % (self._width-1,
                      #self._sep.join('%- *s' % (self._lengths[key],
                                                #strings[key]) for key in keys))

    #if line != self._oldline:
      #_sys.stdout.write('\r'+line)
      #_sys.stdout.flush()
    #self._oldline = line

  #def __del__(self):
    #self.end()

  #def remove(self, *keys):
    #"""Stop monitoring the specified variables."""
    #for key in keys:
      #self._values.pop(key, None)
      #self._lengths.pop(key, None)
      #self._formats.pop(key, None)
    #self.write()

    
    
    
    
    
    
    
    
    








class Abort(object):
  """Check keyboard buffer if a certain key has been pressed.

  Initialize before your loop (e.g., of an iterative algorithm). Check within
  (at the end) the loop body (e.g., break the loop on positive check). Finalize
  after the loop. Do not forget to finalize, so that your terminal is put back
  into normal mode! Or use it as a context manager (use the with statement).

  Example:
  >>> import time
  >>> import progress
  >>> with progress.Escape() as e:
  >>>   for i in range(10):
  >>>     time.sleep(1) # do stuff
  >>>     if e.check():
  >>>       break       # leave loop early, because "q" was pressed
  >>> print e.buff
  """
  # 2012-01-18 until 2012-03-23

  def __init__(self, key='q', timeout=0):
    """Initialize. Specify key and timeout. Put terminal into cbreak mode.

    Future plans:
    --> make key combinations possible (e.g., CTRL+q)"""
    # 2012-01-18 until 2012-03-05
    import termios
    import tty

    # get key
    if len(key) != 1:
      raise ValueError, 'invalid key'
    self.key = key

    # enable this class
    self.disabled = False

    # initialize other attributes
    try:
      self.oldattr = termios.tcgetattr(_sys.stdin)
    except:
      self.disabled = True # disable, probably it does not work with nohup
      return

    self.buff    = ''      # collect all other pressed keys, in case they are needed
    self.timeout = timeout
    self.count   = 0       # count the total number of checks made

    # enter cbreak mode
    tty.setcbreak(_sys.stdin.fileno())

  def check(self):
    """Check if the escape key has been pressed in the meanwhile. All other
    contents of the keyboard buffer will be lost and cannot be recovered."""
    # 2012-01-18 until 2012-02-19
    if self.disabled:
      return

    import select

    self.count += 1
    while len(select.select([_sys.stdin], [], [], self.timeout)[0]) > 0:
      char = _sys.stdin.read(1)
      if char == self.key:
        return True
      self.buff += char
    return False

  def finalize(self):
    """Finalize. Put terminal back into normal mode. Return string buffer."""
    # 2012-01-18 until 2012-03-23
    if self.disabled:
      return
    import termios
    try:
      termios.tcsetattr(_sys.stdin, termios.TCSADRAIN, self.oldattr)
    except:
      pass # issue warning?
    return self.buff

  #def __del__(self):
    #self.finalize() ## why isn't he able to import termios using __del__?

  def __enter__(self):
    return self

  def __exit__(self, type, value, traceback):
    self.finalize()










class Converge(object):
  """Check data for convergence criterion
  in some sort of iteration step of an interative algorithm.
  Specify a certain tolerance (accuracy) that should be reached.

  Future plans:
  --> choose from various convergence criterions
  --> could choose from mean, gmean, min, max, max-min (peak-to-peak), ...
      (find more under http://en.wikipedia.org/wiki/Average)
  --> offer relative and absolute versions of each criterion
  --> let the user specify his own criterion (as a function object)
  --> use Cython, write version that is callable from C, support OpenMP
  --> add feature to remember several values (e.g., 5) and check that all the
      deltas are small enough (then, it is not enought that "by chance" the
      delta value drops below the tolerance)"""
  # 2012-03-02 until 2012-03-09

  def __init__(self, tol=None, smooth=1): #active=True, criterion=None
                                          #dtype=None, shape=None
                                          #relative=False
    self.tol    = tol    # requested tolerance
    self.smooth = smooth # smooth level (average over this number of deltas)

    # initialize old-data buffer
    self._data_old = None

    # initialize delta list
    # the list will be filled with the number of delta values given by smooth
    self._delta = []

  def check(self, data):
    """Check convergence criterion. Return True if the requested accuracy is
    reached, False otherwise."""
    from numpy import abs, array, mean, sqrt
    from numpy.linalg import norm

    # if requested tolerance is None or non-positive, do not check anything
    if self.tol is None or self.tol <= 0:
      return False

    # force numpy array
    data = array(data) ### force float datatype?

    # on first call, cannot yet check for convergence, return always False
    if self._data_old is None:
      # write to old-data buffer for the first time
      self._data_old = data
      return False

    # calculate new delta (use quadratic mean for now)
    #self._delta.append(norm((data-self._data_old)/data)/sqrt(data.size))
    self._delta.append(mean(abs((data-self._data_old)/data)))

    # only check the criterion if the number of deltas given by smooth is
    # already reached
    if len(self._delta) < self.smooth:
      return False

    # forget oldest delta
    if len(self._delta) > self.smooth:
      self._delta.pop(0)

    # check convergence criterion (average all available deltas)
    converged = mean(self._delta) < self.tol

    # update old-data buffer
    self._data_old = data

    # return truth value
    return converged

  def delta(self):
    """Return the current mean delta (based on the last call of "check").
    Return -1 if the delta list is still empty."""
    # 2012-03-09
    from numpy import mean
    if len(self._delta) > 0:
      return mean(self._delta)
    else:
      return -1

  def __enter__(self):
    return self

  def __exit__(self, type, value, traceback):
    del self._data_old












def get_columns():
  """Try to get number of columns of the current terminal window. Otherwise,
  return standard (80 columns)."""
  # 2012-03-05
  try:
    # then try environment variable
    columns = int(_os.environ['COLUMNS'])
  except (KeyError, ValueError):
    # try tput
    try:
      columns = int(_commands.getoutput('tput cols'))
    except ValueError:
      # otherwise, assume standard width
      columns = 80
  return columns

  
  
  
  
  
  
  
  
  
  

  
  
class StatusLine(object):
  """Show a status line that is updated by the user every once in a while
  using "carriage return"."""
  # 2012-04-10
  def __init__(self, line='', delay=0., cols=None):
    """Initialize status line object. Can be given an initial line, a minimum
    delay time and a custom number of columns (terminal width, will be obtained
    automatically on Unix systems)."""
    # 2012-04-10
    self.delay = delay
    
    # get number of columns (terminal width)
    if cols is None:
      self.cols = get_columns()
    else:
      self.cols = cols
      
    # initialize old line buffer
    self._oldline = ''
    self._oldtime = _time.time()
    
    # remember if line break already occured
    self._ended = False
      
    # print line for the first time
    self._write(line)
  
  def _write(self, line):
    """Write the given line, replacing the old one."""
    # 2012-04-10
    oldlen = len(self._oldline)
    newlen = len(line)
    spaces_needed = oldlen-newlen if oldlen > newlen else 0
    _sys.stdout.write('\r'+line[:(self.cols-1)]+' '*spaces_needed)
    _sys.stdout.flush()
    
    # update old line buffer
    self._oldline = line
    self._oldtime = _time.time()
      
  def update(self, line):
    """Update the line by the given string, replacing the old line.
    The line only gets printed if the line has changed, and if the given
    delay time has been passed."""
    # 2012-04-10
    
    # respect delay time
    if _time.time()-self._oldtime < self.delay:
      return
    
    # see if line has changed at all
    if line == self._oldline:
      return
    
    # ok, then replace the old line by the new one
    self._write(line)
  
  def end(self):
    """End status line, make line break."""
    # 2012-04-10
    if not self._ended:
      _sys.stdout.write('\n')
      _sys.stdout.flush()
      self._ended = True

  def __enter__(self):
    return self
  
  def __exit__(self):
    return self.end()
    
  def __del__(self):
    return self.end()


    
    
    
    
    
    
    
    
    
    
    